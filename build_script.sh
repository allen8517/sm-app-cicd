#!/bin/bash
# This is a simple shell script

echo "snapmaker build ios"
# base64 -i PROVISIONING_PROFILE.mobileprovision | pbcopy

flutter pub get

cd ./ios
pod install
cd ../
echo "$PWD"

IOS_CERTIFICATE="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"

IOS_CERTIFICATE_PASSWORD="snapmaker"
IOS_KEYCHAIN_PASSWORD="guhi-nuxy-mgnh-cbqs"
echo "Install Apple Certificates begin"
echo "$IOS_CERTIFICATE" | base64 --decode > /tmp/certificate.p12
security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
security import /tmp/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
security list-keychains -s ~/Library/Keychains/build.keychain
security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" ~/Library/Keychains/build.keychain
          
echo "Install Apple Certificates end"

IOS_PROVISIONING_PROFILE=""

echo "Install Apple Provisioning Profile"
echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /tmp/snapmakerAppAdhoc.mobileprovision
mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
cp /tmp/snapmakerAppAdhoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

TEAM_ID="5NGD3B3V37"
IOS_KEYCHAIN_PASSWORD="guhi-nuxy-mgnh-cbqs"

echo "$IOS_CERTIFICATE" | base64 --decode > /tmp/certificate.p12
security create-keychain -p "" build.keychain
security import /tmp/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
security list-keychains -s ~/Library/Keychains/build.keychain
security unlock-keychain -p "" ~/Library/Keychains/build.keychain

# 清理之前的构建
xcodebuild clean -workspace ./ios/Runner.xcworkspace -scheme Runner -configuration Release

# 归档项目（.xcarchive 文件）
# Build ios archive 自动签名后面加入-allowProvisioningUpdates
xcodebuild archive \
    -workspace ./ios/Runner.xcworkspace \
    -scheme Runner \
    -configuration Release \
    -archivePath build/ios/archive/Runner.xcarchive

# Export Archive ipa
xcodebuild -exportArchive \
    -archivePath build/ios/archive/Runner.xcarchive \
    -exportOptionsPlist ExportOptions.plist \
    -exportPath build/ios/ipa
    
#xcodebuild -exportArchive \
#    -archivePath build/ios/archive/Runner.xcarchive \
#    -exportOptionsPlist ExportOptions-signingCertificate.plist \
#    -exportPath build/ios/ipa
