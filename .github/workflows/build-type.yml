name: Build and Upload iOS App

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Type of build to run (release-testing, appstore)'
        required: true
        default: 'release-testing'
        type: choice
        options:
          - release-testing
          - appstore

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'
    
      # 在构建之前执行 flutter clean
      - name: Flutter Clean
        run: flutter clean

      # flutter pub get
      - name: Install dependencies
        run: flutter pub get

    
      - name: Install Pods
        run: pod install --no-repo-update
        working-directory: ios
          
      - name: Set up build type
        run: |
            echo "Build type is: ${{ github.event.inputs.build-type }}"

      # Set up Apple Certificate and Profile for signing
      - name: Set up Signing Certificates and Provisioning Profiles
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          keychain: 'tempKeychina'
          keychain-password: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}

    
      - name: Set provisioning profile based on build type
        id: set_profile
        run: |
            if [[ "${{ github.event.inputs.build-type }}" == "release-testing" ]]; then
              echo "release-testing profile selected"
              echo "IOS_PROVISIONING_PROFILE=${{ secrets.IOS_PROVISIONING_PROFILE }}" >> $GITHUB_ENV
              echo "EXPORT_OPTIONS_PLIST=ExportOptions_release_testing.plist" >> $GITHUB_ENV
              echo "BUILD_CONFIGURATION=Profile" >> $GITHUB_ENV
              echo "BUILD_CONFIGURATION=Profile" >> $GITHUB_ENV
              echo "IOS_MOBILE_PROVISION_NAME=snapmakerAppAdhoc" >> $GITHUB_ENV
            elif [[ "${{ github.event.inputs.build-type }}" == "appstore" ]]; then
              echo "appstore profile selected"
              echo "IOS_PROVISIONING_PROFILE=${{ secrets.IOS_PROVISIONING_PROFILE_APPSTORE }}" >> $GITHUB_ENV
              echo "EXPORT_OPTIONS_PLIST=ExportOptions_appstore.plist" >> $GITHUB_ENV
              echo "IOS_MOBILE_PROVISION_NAME=snapmakerAppAppstore" >> $GITHUB_ENV
            fi

      # 安装描述文件
      - name: Install Apple Provisioning Profile
        # 通过 env 传递 GitHub Secrets IOS_PROVISIONING_PROFILE使用adhoc/appstore文件  IOS_PROVISIONING_PROFILE_APPSTORE   IOS_PROVISIONING_PROFILE
        env:
          IOS_PROVISIONING_PROFILE: ${{ env.IOS_PROVISIONING_PROFILE }}
          IOS_MOBILE_PROVISION_NAME:  ${{ env.IOS_MOBILE_PROVISION_NAME }}
        run: |
          echo "*****Decoding $IOS_MOBILE_PROVISION_NAMETE Apple Provisioning Profile"
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /tmp/$IOS_MOBILE_PROVISION_NAME.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/$IOS_MOBILE_PROVISION_NAME.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
     
      - name: Set provisioning profile based on build type
        id: set_archive_path
        run: |
            echo "set_archive_path"
            echo "IOS_ARCHIVE_PATH=build/ios/archive/Runner-${{ secrets.IOS_PROVISIONING_PROFILE }}.xcarchive" >> $GITHUB_ENV
            echo "IOS_IPA_PATH=build/ios/ipa/Runner-${{ secrets.IOS_PROVISIONING_PROFILE }}.ipa" >> $GITHUB_ENV

      - name: Build iOS app
        env:
          IOS_ARCHIVE_PATH: ${{ env.IOS_ARCHIVE_PATH }}
          BUILD_CONFIGURATION: ${{ env.BUILD_CONFIGURATION }}
        run: |
          xcodebuild \
              -workspace ios/Runner.xcworkspace \
              -scheme Runner \
              -sdk iphoneos \
              -configuration "$BUILD_CONFIGURATION" \
              archive -archivePath "$IOS_ARCHIVE_PATH"

      - name: Export IPA
        env:
          IOS_IPA_PATH: ${{ env.IOS_IPA_PATH }}
          IOS_ARCHIVE_PATH: ${{ env.IOS_ARCHIVE_PATH }}
          EXPORT_OPTIONS_PLIST: ${{ env.EXPORT_OPTIONS_PLIST }}
        run: |
            xcodebuild \
              -exportArchive \
              -archivePath "$IOS_ARCHIVE_PATH" \
              -exportOptionsPlist ios/"$EXPORT_OPTIONS_PLIST" \
              -exportPath "$IOS_IPA_PATH"

      # - name: Flutter build ipa and Export iOS IPA
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ env.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     flutter build ipa --release --export-options-plist=ios/"$EXPORT_OPTIONS_PLIST"
          
      - name: Upload to TestFlight (if testflight)
        if: github.event.inputs.build-type == 'appstore'
        uses: apple-actions/upload-testflight-build@v1
        env:
          IOS_IPA_PATH: ${{ env.IOS_IPA_PATH }}
        with:
          app-path: "$IOS_IPA_PATH"
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      
