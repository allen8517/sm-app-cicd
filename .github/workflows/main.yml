name: Flutter CI/CD
# base64 -i PROVISIONING_PROFILE.mobileprovision | pbcopy
on:
  # watch:
  #   types: started
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  METHOD: "release-testing"
  TEAM_ID: "5NGD3B3V37"
  SIGNING_CERTIFICATE: "Apple Distribution: Shenzhen Snapmaker Technologies Co., Ltd. (5NGD3B3V37)"
  PROVISIONGPROFILENAME: "snapmakerAppAdhoc"
  BUILD_ID: "com.snapmaker.lavaapp"

jobs:
  build:
    runs-on: macos-latest
    if: github.event.repository.owner.id == github.event.sender.id
    timeout-minutes: 60
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Print repository name - $GITHUB_REPOSITORY
      - name: Print repository name
        run: |
         echo "Repository: $GITHUB_REPOSITORY"
     
      # Print GitHub run URL - $GITHUB_RUN_ID
      - name: Print GitHub run URL
        run: |
          echo "Run URL: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

      # 设置java环境
      - name: Set up Java for Android build
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # or '11'
      
      # 设置 Ruby 和 CocoaPods 环境
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'  # 根据项目需要调整版本

      # 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'
    
      # 在构建之前执行 flutter clean
      - name: Flutter Clean
        run: flutter clean

      # flutter pub get
      - name: Install dependencies
        run: flutter pub get
    
      # # Gradle 缓存 (Android)
      # - name: Cache Gradle dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-
      
      # # Build Android APK
      # - name: Build Android APK
      #   run: flutter build apk --release
      
      # # Archive android APK
      # - name: Archive android APK
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: android-apk
      #     path: build/app/outputs/flutter-apk/app-release.apk    
       
      # 缓存 CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: pod install --no-repo-update
        working-directory: ios
      
      # 清理构建目录
      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData

      # 导入证书并解锁密钥链
      - name: Install Apple Certificates
        # 通过 env 传递 GitHub Secrets
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          echo "*****Decoding IOS_CERTIFICATE and setting up keychain"
          echo "$IOS_CERTIFICATE" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" ~/Library/Keychains/build.keychain
      
      # 安装描述文件
      - name: Install Apple Provisioning Profile
        # 通过 env 传递 GitHub Secrets IOS_PROVISIONING_PROFILE使用adhoc/appstore文件
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          echo "*****Decoding IOS_CERTIFICATE and setting up keychain"
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      # Create ios/ExportOptions.plist <!- `{app-store-connect, release-testing, enterprise, debugging, validation}` 是用于 `method` 的一些常见值 -->
      - name: Create Apple ios/ExportOptions.plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > ios/ExportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ios/ExportOptions.plist
          echo '<plist version="1.0">' >> ios/ExportOptions.plist
          echo '<dict>' >> ios/ExportOptions.plist
          echo '	<key>compileBitcode</key>' >> ios/ExportOptions.plist
          echo '	<false/>' >> ios/ExportOptions.plist
          echo '	<key>destination</key>' >> ios/ExportOptions.plist
          echo '	<string>export</string>' >> ios/ExportOptions.plist
          echo '	<key>method</key>' >> ios/ExportOptions.plist
          echo "	<string>${{ env.METHOD }}</string>" >> ios/ExportOptions.plist
          echo '	<key>signingStyle</key>' >> ios/ExportOptions.plist
          echo '	<string>manual</string>' >> ios/ExportOptions.plist
          echo '	<key>stripSwiftSymbols</key>' >> ios/ExportOptions.plist
          echo '	<true/>' >> ios/ExportOptions.plist
          echo '	<key>teamID</key>' >> ios/ExportOptions.plist
          echo "	<string>${{ env.TEAM_ID }}</string>" >> ios/ExportOptions.plist
          echo '	<key>thinning</key>' >> ios/ExportOptions.plist
          echo '	<string>&lt;none&gt;</string>' >> ios/ExportOptions.plist
          echo '	<key>signingCertificate</key>' >> ios/ExportOptions.plist
          echo "	<string>${{ env.SIGNING_CERTIFICATE }}</string>" >> ios/ExportOptions.plist
          echo '	<key>provisioningProfiles</key>' >> ios/ExportOptions.plist
          echo '	<dict>' >> ios/ExportOptions.plist
          echo '		<key>${{ env.BUILD_ID }}</key>' >> ios/ExportOptions.plist
          echo '		<string>${{ env.PROVISIONGPROFILENAME }}</string>' >> ios/ExportOptions.plist
          echo '	</dict>' >> ios/ExportOptions.plist
          echo '</dict>' >> ios/ExportOptions.plist
          echo '</plist>' >> ios/ExportOptions.plist
       
      - name: Output ios/ExportOptions file to log
        run: cat ios/ExportOptions.plist
     

      # Build the iOS app
      - name: Build iOS App
        run: flutter build ios --release --no-codesign

      # # Set up Apple Certificate and Profile for signing
      # - name: Set up Signing Certificates and Provisioning Profiles
      #   uses: apple-actions/import-codesign-certs@v3
      #   with:
      #     p12-file-base64: ${{ secrets.IOS_CERTIFICATE }}
      #     p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      #     provisioning-profile-base64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      #     keychain: 'tempKeychina'
      #     keychain-password: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}

      # Archive the iOS app for deployment or further actions
      - name: Archive the iOS App
        run: |
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            archive \
            -archivePath build/ios/archive/Runner.xcarchive

      # Export IPA (optional)
      - name: Export IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa/snapmaker.ipa \

      # flutter build ipa  --export-method: ad-hoc, development, enterprise
      # - name: Flutter build ipa and Export iOS IPA
      #   run: |
      #     flutter build ipa --release --export-options-plist=ios/ExportOptions-signingCertificate.plist            
    
      # Ensure this step only runs after the build process to avoid deleting necessary certificates too early
      # - name: Delete certificates
      #   run: |
      #     rm -f /tmp/certificate.p12
      #     rm -f /tmp/profile.mobileprovision
  
  # 这些任务在 build 成功后运行，分别将 Android 和 iOS 的构建结果（APK 和 .xcarchive）上传为 GitHub Artifacts
  android-deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Upload Android APK to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk

  ios-deploy:
    runs-on: macos-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:

      - name: Upload build ios artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: build/ios/ipa/snapmaker.ipa

      # Upload the dSYM file (Symbols for debugging)
      - name: Upload dSYM
        uses: actions/upload-artifact@v3
        with:
          name: ios-dsym
          path: build/ios/archive/Runner.xcarchive/dSYMs/

  notify:
    runs-on: ubuntu-latest
    needs: [android-deploy, ios-deploy]  # 依赖于 android-deploy 和 ios-deploy 的执行结果
    steps:
      # always() / success() || failure() 不论前面的 job 成功或失败都会执行  $GITHUB_REPOSITORY $GITHUB_RUN_ID
      - name: Notify via Feishu
        if: success() || failure()
        run: |
          curl -X POST "$FEISHU_WEBHOOK_URL" \
            -H 'Content-Type: application/json' \
            -d '{
            "msg_type": "text",
            "content": {
              "text": "CI/CD Job Status: \nAndroid Job: ${{ needs.android-deploy.result }} \niOS Job: ${{ needs.ios-deploy.result }}\nDetails: ${{ github.server_url }}/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            }
          }'
        env:
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
