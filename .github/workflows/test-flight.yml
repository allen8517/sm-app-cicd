name: 'Upload app to TestFlight'
# base64 -i PROVISIONING_PROFILE.mobileprovision | pbcopy
# run-name: ${{ github.triggering_actor }} is testing out GitHub Actions 🚀
on:
  watch:
    types: started
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

env:
  METHOD: "release-testing"
  TEAM_ID: "5NGD3B3V37"
  SIGNING_CERTIFICATE: "Apple Distribution: Shenzhen Snapmaker Technologies Co., Ltd. (5NGD3B3V37)"
  PROVISIONGPROFILENAME: "snapmakerAppAdhoc"
  BUILD_ID: "com.snapmaker.lavaapp"

jobs:
  common-build:
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
  
  ios-build:
    needs: common-build
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      # 检出代码
      - name: Checkout repository code
        uses: actions/checkout@v4
      

      # 设置 Ruby 和 CocoaPods 环境
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'  # 根据项目需要调整版本

      # 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'
    
      # 在构建之前执行 flutter clean
      - name: Flutter Clean
        run: flutter clean

      # flutter pub get
      - name: Install dependencies
        run: flutter pub get
    
      # # 运行 Flutter 分析 (可选，确保代码符合 Dart 规范)
      # - name: Run Flutter analyze
      #   run: flutter analyze

      # 运行 Flutter 测试 (可选)
      # - name: Run Flutter tests
      #   run: flutter test


      # 缓存 CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: pod install --no-repo-update
        working-directory: ios
      
      # 清理构建目录
      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData

       # Set up Apple Certificate and Profile for signing
      - name: Set up Signing Certificates and Provisioning Profiles
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          keychain: 'tempKeychina'
          keychain-password: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}

      # 安装描述文件
      - name: Install Apple Provisioning Profile
        # 通过 env 传递 GitHub Secrets IOS_PROVISIONING_PROFILE使用adhoc/appstore文件
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          echo "*****Decoding IOS_CERTIFICATE and setting up keychain"
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      # Create ios/ExportOptions.plist <!- `{app-store-connect, release-testing, enterprise, debugging, validation}` 是用于 `method` 的一些常见值 -->
      - name: Create Apple ios/ExportOptions.plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > ios/ExportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ios/ExportOptions.plist
          echo '<plist version="1.0">' >> ios/ExportOptions.plist
          echo '<dict>' >> ios/ExportOptions.plist
          echo '  <key>compileBitcode</key>' >> ios/ExportOptions.plist
          echo '  <false/>' >> ios/ExportOptions.plist
          echo '  <key>destination</key>' >> ios/ExportOptions.plist
          echo '  <string>export</string>' >> ios/ExportOptions.plist
          echo '  <key>method</key>' >> ios/ExportOptions.plist
          echo "  <string>${{ env.METHOD }}</string>" >> ios/ExportOptions.plist
          echo '  <key>signingStyle</key>' >> ios/ExportOptions.plist
          echo '  <string>manual</string>' >> ios/ExportOptions.plist
          echo '  <key>stripSwiftSymbols</key>' >> ios/ExportOptions.plist
          echo '  <true/>' >> ios/ExportOptions.plist
          echo '  <key>teamID</key>' >> ios/ExportOptions.plist
          echo "  <string>${{ env.TEAM_ID }}</string>" >> ios/ExportOptions.plist
          echo '  <key>thinning</key>' >> ios/ExportOptions.plist
          echo '  <string>&lt;none&gt;</string>' >> ios/ExportOptions.plist
          echo '  <key>signingCertificate</key>' >> ios/ExportOptions.plist
          echo "  <string>${{ env.SIGNING_CERTIFICATE }}</string>" >> ios/ExportOptions.plist
          echo '  <key>provisioningProfiles</key>' >> ios/ExportOptions.plist
          echo '  <dict>' >> ios/ExportOptions.plist
          echo '    <key>${{ env.BUILD_ID }}</key>' >> ios/ExportOptions.plist
          echo '    <string>${{ env.PROVISIONGPROFILENAME }}</string>' >> ios/ExportOptions.plist
          echo '  </dict>' >> ios/ExportOptions.plist
          echo '</dict>' >> ios/ExportOptions.plist
          echo '</plist>' >> ios/ExportOptions.plist
       
      - name: Output ios/ExportOptions file to log
        run: cat ios/ExportOptions.plist
     

      # Build the iOS app
      - name: Build iOS App
        run: flutter build ios --release --no-codesign

     

      # Archive the iOS app for deployment or further actions
      - name: Archive the iOS App
        run: |
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            archive \
            -archivePath build/ios/archive/Runner.xcarchive

      # Export IPA (optional)
      - name: Export IPA
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa/snapmaker.ipa \

      - name: Upload build ios artifacts
        uses: actions/upload-artifact@v3
        with:
            name: ios-ipa
            path: build/ios/ipa/snapmaker.ipa
      # flutter build ipa  --export-method: ad-hoc, development, enterprise  ExportOptions  -signingCertificate
      - name: Flutter build ipa and Export iOS IPA
        run: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist            
    
      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with: 
            app-path: 'build/ios/ipa/snapmaker.ipa' 
            issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
            api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
            api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
            
      # Ensure this step only runs after the build process to avoid deleting necessary certificates too early
      # - name: Delete certificates
      #   run: |
      #     rm -f /tmp/certificate.p12
      #     rm -f /tmp/profile.mobileprovision
  
  
